package com.example.maola.yummifragment.Database;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SALVATE_DB".
*/
public class SalvateDBDao extends AbstractDao<SalvateDB, Long> {

    public static final String TABLENAME = "SALVATE_DB";

    /**
     * Properties of entity SalvateDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property IdSalvate = new Property(0, Long.class, "idSalvate", true, "_id");
        public final static Property CategoriaId = new Property(1, Long.class, "categoriaId", false, "CATEGORIA_ID");
        public final static Property TitoloRicettaSalvata = new Property(2, String.class, "titoloRicettaSalvata", false, "TITOLO_RICETTA_SALVATA");
        public final static Property PersoneOriginali = new Property(3, int.class, "personeOriginali", false, "PERSONE_ORIGINALI");
        public final static Property PersoneFinali = new Property(4, int.class, "personeFinali", false, "PERSONE_FINALI");
        public final static Property CorpoRicettaSalvata = new Property(5, String.class, "corpoRicettaSalvata", false, "CORPO_RICETTA_SALVATA");
        public final static Property Note = new Property(6, String.class, "note", false, "NOTE");
        public final static Property CorpoRicettaOriginale = new Property(7, String.class, "corpoRicettaOriginale", false, "CORPO_RICETTA_ORIGINALE");
        public final static Property Datetime = new Property(8, java.util.Date.class, "datetime", false, "DATETIME");
    }

    private DaoSession daoSession;


    public SalvateDBDao(DaoConfig config) {
        super(config);
    }
    
    public SalvateDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SALVATE_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: idSalvate
                "\"CATEGORIA_ID\" INTEGER," + // 1: categoriaId
                "\"TITOLO_RICETTA_SALVATA\" TEXT," + // 2: titoloRicettaSalvata
                "\"PERSONE_ORIGINALI\" INTEGER NOT NULL ," + // 3: personeOriginali
                "\"PERSONE_FINALI\" INTEGER NOT NULL ," + // 4: personeFinali
                "\"CORPO_RICETTA_SALVATA\" TEXT," + // 5: corpoRicettaSalvata
                "\"NOTE\" TEXT," + // 6: note
                "\"CORPO_RICETTA_ORIGINALE\" TEXT," + // 7: corpoRicettaOriginale
                "\"DATETIME\" INTEGER);"); // 8: datetime
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SALVATE_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SalvateDB entity) {
        stmt.clearBindings();
 
        Long idSalvate = entity.getIdSalvate();
        if (idSalvate != null) {
            stmt.bindLong(1, idSalvate);
        }
 
        Long categoriaId = entity.getCategoriaId();
        if (categoriaId != null) {
            stmt.bindLong(2, categoriaId);
        }
 
        String titoloRicettaSalvata = entity.getTitoloRicettaSalvata();
        if (titoloRicettaSalvata != null) {
            stmt.bindString(3, titoloRicettaSalvata);
        }
        stmt.bindLong(4, entity.getPersoneOriginali());
        stmt.bindLong(5, entity.getPersoneFinali());
 
        String corpoRicettaSalvata = entity.getCorpoRicettaSalvata();
        if (corpoRicettaSalvata != null) {
            stmt.bindString(6, corpoRicettaSalvata);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(7, note);
        }
 
        String corpoRicettaOriginale = entity.getCorpoRicettaOriginale();
        if (corpoRicettaOriginale != null) {
            stmt.bindString(8, corpoRicettaOriginale);
        }
 
        java.util.Date datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindLong(9, datetime.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SalvateDB entity) {
        stmt.clearBindings();
 
        Long idSalvate = entity.getIdSalvate();
        if (idSalvate != null) {
            stmt.bindLong(1, idSalvate);
        }
 
        Long categoriaId = entity.getCategoriaId();
        if (categoriaId != null) {
            stmt.bindLong(2, categoriaId);
        }
 
        String titoloRicettaSalvata = entity.getTitoloRicettaSalvata();
        if (titoloRicettaSalvata != null) {
            stmt.bindString(3, titoloRicettaSalvata);
        }
        stmt.bindLong(4, entity.getPersoneOriginali());
        stmt.bindLong(5, entity.getPersoneFinali());
 
        String corpoRicettaSalvata = entity.getCorpoRicettaSalvata();
        if (corpoRicettaSalvata != null) {
            stmt.bindString(6, corpoRicettaSalvata);
        }
 
        String note = entity.getNote();
        if (note != null) {
            stmt.bindString(7, note);
        }
 
        String corpoRicettaOriginale = entity.getCorpoRicettaOriginale();
        if (corpoRicettaOriginale != null) {
            stmt.bindString(8, corpoRicettaOriginale);
        }
 
        java.util.Date datetime = entity.getDatetime();
        if (datetime != null) {
            stmt.bindLong(9, datetime.getTime());
        }
    }

    @Override
    protected final void attachEntity(SalvateDB entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SalvateDB readEntity(Cursor cursor, int offset) {
        SalvateDB entity = new SalvateDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // idSalvate
            cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1), // categoriaId
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // titoloRicettaSalvata
            cursor.getInt(offset + 3), // personeOriginali
            cursor.getInt(offset + 4), // personeFinali
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // corpoRicettaSalvata
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // note
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // corpoRicettaOriginale
            cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)) // datetime
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SalvateDB entity, int offset) {
        entity.setIdSalvate(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCategoriaId(cursor.isNull(offset + 1) ? null : cursor.getLong(offset + 1));
        entity.setTitoloRicettaSalvata(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPersoneOriginali(cursor.getInt(offset + 3));
        entity.setPersoneFinali(cursor.getInt(offset + 4));
        entity.setCorpoRicettaSalvata(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setNote(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCorpoRicettaOriginale(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setDatetime(cursor.isNull(offset + 8) ? null : new java.util.Date(cursor.getLong(offset + 8)));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SalvateDB entity, long rowId) {
        entity.setIdSalvate(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SalvateDB entity) {
        if(entity != null) {
            return entity.getIdSalvate();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SalvateDB entity) {
        return entity.getIdSalvate() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getCategorieDBDao().getAllColumns());
            builder.append(" FROM SALVATE_DB T");
            builder.append(" LEFT JOIN CATEGORIE_DB T0 ON T.\"CATEGORIA_ID\"=T0.\"_id\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected SalvateDB loadCurrentDeep(Cursor cursor, boolean lock) {
        SalvateDB entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        CategorieDB categorieDB = loadCurrentOther(daoSession.getCategorieDBDao(), cursor, offset);
        entity.setCategorieDB(categorieDB);

        return entity;    
    }

    public SalvateDB loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<SalvateDB> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<SalvateDB> list = new ArrayList<SalvateDB>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<SalvateDB> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<SalvateDB> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
